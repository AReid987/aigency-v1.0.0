version: '3.8'

# Production Docker Compose Configuration for Multi-Source Dashboard
# Optimized for production deployment with security, performance, and monitoring

services:
  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dashboard_prod}
      POSTGRES_USER: ${POSTGRES_USER:-dashboard_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dashboard_user} -d ${POSTGRES_DB:-dashboard_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: |
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    networks:
      - dashboard_network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: |
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dashboard_network

  # FastAPI Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.backend
      args:
        - BUILD_ENV=production
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dashboard_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dashboard_prod}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - ENVIRONMENT=production
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
      - RATE_LIMIT_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SENTRY_DSN=${SENTRY_DSN:-}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - dashboard_network

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.celery
      args:
        - BUILD_ENV=production
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dashboard_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dashboard_prod}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: |
      celery -A app.tasks.celery_app worker 
      --loglevel=info 
      --concurrency=${CELERY_WORKER_CONCURRENCY:-4}
      --max-tasks-per-child=1000
      --time-limit=300
      --soft-time-limit=240
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - dashboard_network

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.celery
      args:
        - BUILD_ENV=production
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dashboard_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dashboard_prod}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - celery_beat_schedule:/app/schedule
    command: |
      celery -A app.tasks.celery_app beat 
      --loglevel=info 
      --schedule=/app/schedule/celerybeat-schedule
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - dashboard_network

  # Flower for task monitoring
  flower:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.celery
      args:
        - BUILD_ENV=production
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
    command: |
      celery -A app.tasks.celery_app flower 
      --port=5555 
      --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD}
      --url_prefix=/flower
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - dashboard_network

  # Nginx reverse proxy and static file serving
  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend/multi-source-dashboard/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - dashboard_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - dashboard_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dashboard_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_schedule:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  dashboard_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16