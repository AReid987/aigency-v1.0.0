# -*- coding: utf-8 -*-
"""ai-job-market.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tXKDpX0nXTHIcg1671DnPYplDljcenax
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib.patches import Rectangle
import matplotlib.patches as mpatches
from datetime import datetime
import seaborn as sns

# Set up the plot style
plt.style.use('default')
sns.set_palette("husl")

# Create figure with dual y-axes
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12), height_ratios=[3, 2],facecolor='#282c34')
fig.suptitle('AI Evolution Timeline & Job Market .Impact (1950-2025)',
             fontsize=20, fontweight='bold', y=1.02)
ax1.set_facecolor('#1133FF0F')
ax2.set_facecolor('#1133FF0F')

# AI Timeline Data
ai_milestones = {
    1950: "Turing Test Introduced",
    1956: "Term 'AI' Coined at Dartmouth",
    1958: "Perceptron Neural Network",
    1966: "ELIZA Chatbot Created",
    1973: "AI Winter Begins",
    1980: "Expert Systems Renaissance",
    1985: "Bayesian Networks",
    1997: "Deep Blue Defeats Kasparov",
    2006: "Deep Learning Revival",
    2011: "IBM Watson on Jeopardy",
    2012: "AlexNet CNN Breakthrough",
    2017: "Transformer Architecture",
    2018: "GPT-1 Released",
    2020: "GPT-3 (175B parameters)",
    2022: "ChatGPT Launch",
    2023: "GPT-4 Multimodal AI",
    2024: "AI Agents & Automation",
    2025: "Projected AGI Progress"
}

# Job Impact Data (approximate percentages based on research)
job_impact_data = {
    1950: 0,
    1960: 2,
    1970: 5,
    1980: 8,
    1990: 12,
    2000: 18,
    2010: 25,
    2015: 35,
    2020: 42,
    2022: 47,
    2024: 52,
    2025: 60
}

# AI Era periods with colors
ai_eras = [
    (1950, 1970, "Early AI & Neural Networks", "#2E86AB"),
    (1970, 1990, "Expert Systems Era", "#A23B72"),
    (1990, 2010, "Machine Learning Renaissance", "#F18F01"),
    (2010, 2020, "Deep Learning Revolution", "#C73E1D"),
    (2020, 2025, "Generative AI Era", "#6A994E")
]

# Plot AI timeline
years = list(ai_milestones.keys())
milestones = list(ai_milestones.values())

# Create era background colors
for start, end, era_name, color in ai_eras:
    ax1.axvspan(start, end, alpha=0.15, color=color, label=era_name)

# Plot milestone points
for i, (year, milestone) in enumerate(ai_milestones.items()):
    y_pos = 0.5 + (i % 3) * 0.3 - 0.3  # Stagger vertically
    ax1.scatter(year, y_pos, s=100, c='white', edgecolors='black', zorder=5, linewidth=2)

    # Add milestone text
    if i % 2 == 0:  # Alternate above and below
        ax1.annotate(milestone, (year, y_pos), xytext=(5, 15),
                    textcoords='offset points', fontsize=9,
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8),
                    ha='left', va='bottom')
    else:
        ax1.annotate(milestone, (year, y_pos), xytext=(5, -25),
                    textcoords='offset points', fontsize=9,
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8),
                    ha='left', va='top')

ax1.set_xlim(1945, 2030)
ax1.set_ylim(-0.5, 1.5)
ax1.set_xlabel('Year', fontsize=12, fontweight='bold')
ax1.set_title('Major AI Milestones & Development Eras', fontsize=14, fontweight='bold', pad=20)
ax1.grid(True, alpha=0.3)
ax1.legend(loc='upper left', fontsize=10)

# Remove y-axis labels for timeline
ax1.set_yticks([])

# Plot job impact data
years_impact = list(job_impact_data.keys())
percentages = list(job_impact_data.values())

# Create smooth curve
years_smooth = np.linspace(min(years_impact), max(years_impact), 100)
percentages_smooth = np.interp(years_smooth, years_impact, percentages)

ax2.plot(years_smooth, percentages_smooth, linewidth=3, color='#C73E1D', label='Jobs at Risk (%)')
ax2.fill_between(years_smooth, percentages_smooth, alpha=0.3, color='#C73E1D')

# Add data points
ax2.scatter(years_impact, percentages, s=80, c='white', edgecolors='#C73E1D',
           zorder=5, linewidth=2)

# Annotate key points
key_points = [(2022, 47, "ChatGPT Era"), (2025, 60, "AI Agents"), (2010, 25, "Deep Learning")]
for year, percent, label in key_points:
    ax2.annotate(f'{label}\n{percent}%', (year, percent),
                xytext=(10, 10), textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                fontsize=9, ha='left')

ax2.set_xlim(1945, 2030)
ax2.set_ylim(0, 70)
ax2.set_xlabel('Year', fontsize=12, fontweight='bold')
ax2.set_ylabel('Percentage of Jobs at Risk', fontsize=12, fontweight='bold')
ax2.set_title('Automation Impact on Employment', fontsize=14, fontweight='bold', pad=20)
ax2.grid(True, alpha=0.3)
ax2.legend()

# Add some statistics text box
stats_text = """Key Statistics:
• 60% of jobs in advanced economies impacted by AI (2025)
• 400-800M workers may need reskilling by 2030
• AI market: $5.4B (2024) → $47.1B (2030)
• 45% annual growth rate for AI agents"""

ax2.text(0.02, 0.98, stats_text, transform=ax2.transAxes, fontsize=10,
         bbox=dict(boxstyle='round,pad=0.5', facecolor='lightblue', alpha=0.8),
         verticalalignment='top')

plt.tight_layout()
plt.show()

# Create a detailed job displacement analysis by tech roles
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 14),facecolor='#282c34')
fig.suptitle('AI Impact on Tech Careers: Current & Future Analysis',
             fontsize=18, fontweight='bold', y=0.95)

ax1.set_facecolor('#1133FF0F')
ax2.set_facecolor('#1133FF0F')

# Job displacement risk by tech role
tech_roles = ['Software Engineer', 'Project Manager', 'UX/UI Designer',
              'Scrum Master', 'Product Owner', 'Data Analyst',
              'QA Tester', 'DevOps Engineer', 'Business Analyst', 'Tech Writer']

displacement_risk = [35, 45, 25, 55, 40, 60, 70, 30, 50, 65]  # Percentage risk
colors = plt.cm.RdYlBu_r(np.linspace(0.2, 0.8, len(tech_roles)))

bars1 = ax1.barh(tech_roles, displacement_risk, color=colors)
ax1.set_xlabel('Displacement Risk (%)', fontweight='bold')
ax1.set_title('Current AI Displacement Risk by Tech Role', fontweight='bold', pad=15)
ax1.grid(axis='x', alpha=0.3)

# Add percentage labels on bars
for i, (bar, risk) in enumerate(zip(bars1, displacement_risk)):
    ax1.text(bar.get_width() + 1, bar.get_y() + bar.get_height()/2,
             f'{risk}%', ha='left', va='center', fontweight='bold')

# AI Adoption Timeline by Industry
industries = ['Tech/Software', 'Financial Services', 'Healthcare',
              'Manufacturing', 'Retail', 'Education']
adoption_2023 = [75, 65, 45, 55, 50, 35]
adoption_2025 = [90, 85, 70, 75, 70, 60]

x = np.arange(len(industries))
width = 0.35

bars2 = ax2.bar(x - width/2, adoption_2023, width, label='2023', color='#3498db', alpha=0.8)
bars3 = ax2.bar(x + width/2, adoption_2025, width, label='2025 (Projected)', color='#e74c3c', alpha=0.8)

ax2.set_xlabel('Industry', fontweight='bold')
ax2.set_ylabel('AI Adoption Rate (%)', fontweight='bold')
ax2.set_title('AI Adoption Rates by Industry', fontweight='bold', pad=15)
ax2.set_xticks(x)
ax2.set_xticklabels(industries, rotation=45, ha='right')
ax2.legend()
ax2.grid(axis='y', alpha=0.3)

# Add value labels on bars
def add_value_labels(bars):
    for bar in bars:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 1,
                f'{int(height)}%', ha='center', va='bottom', fontsize=9)

add_value_labels(bars2)
add_value_labels(bars3)

# New job roles created by AI
new_roles = ['AI/ML Engineer', 'Prompt Engineer', 'AI Ethics Officer',
             'AI Trainer', 'Automation Specialist', 'AI Product Manager',
             'Data Scientist', 'AI UX Designer']
growth_rate = [180, 250, 150, 200, 160, 140, 120, 130]  # Percentage growth

bars4 = ax3.bar(new_roles, growth_rate, color='#2ecc71', alpha=0.8)
ax3.set_ylabel('Job Growth Rate (%)', fontweight='bold')
ax3.set_title('Emerging AI-Related Job Roles (2023-2025)', fontweight='bold', pad=15)
ax3.tick_params(axis='x', rotation=45)
ax3.grid(axis='y', alpha=0.3)

# Add value labels
for bar, rate in zip(bars4, growth_rate):
    ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5,
             f'{rate}%', ha='center', va='bottom', fontweight='bold')

# Skills in demand timeline
years = [2020, 2021, 2022, 2023, 2024, 2025]
ai_ml_skills = [100, 125, 160, 200, 280, 350]  # Index: 2020 = 100
prompt_engineering = [100, 110, 150, 300, 450, 600]
automation_skills = [100, 115, 140, 180, 220, 280]

ax4.plot(years, ai_ml_skills, marker='o', linewidth=3, label='AI/ML Skills', color='#e74c3c')
ax4.plot(years, prompt_engineering, marker='s', linewidth=3, label='Prompt Engineering', color='#9b59b6')
ax4.plot(years, automation_skills, marker='^', linewidth=3, label='Automation Skills', color='#f39c12')

ax4.set_xlabel('Year', fontweight='bold')
ax4.set_ylabel('Demand Index (2020 = 100)', fontweight='bold')
ax4.set_title('AI-Related Skills Demand Growth', fontweight='bold', pad=15)
ax4.legend()
ax4.grid(True, alpha=0.3)

# Add annotations for key points
ax4.annotate('ChatGPT Launch\nSkills Explosion', xy=(2022.5, 300), xytext=(2021.5, 400),
            arrowprops=dict(arrowstyle='->', color='red', lw=2),
            bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
            fontsize=10)

plt.tight_layout()
plt.show()

# Create 3D visualizations showing the relationship between AI advancement, job impact, and time
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize=(20, 12))

# 3D Surface plot: AI Capability vs Job Impact vs Time
ax1 = fig.add_subplot(221, projection='3d')

# Create data for 3D surface
years_3d = np.arange(1950, 2026, 5)
ai_capability = np.array([5, 8, 12, 15, 18, 25, 35, 45, 60, 75, 85, 90, 92, 95, 97, 99])
job_displacement = np.array([0, 1, 3, 5, 8, 12, 18, 25, 35, 42, 47, 52, 55, 58, 60, 62])

# Create meshgrid for surface
X, Y = np.meshgrid(years_3d, np.linspace(0, 100, len(years_3d)))
Z = np.outer(job_displacement, np.ones(len(years_3d)))

# Plot surface
surf = ax1.plot_surface(X, Y, Z, cmap='viridis', alpha=0.7)
ax1.scatter(years_3d, ai_capability, job_displacement, c='red', s=50, label='AI Milestones')

ax1.set_xlabel('Year')
ax1.set_ylabel('AI Capability Level')
ax1.set_zlabel('Job Displacement %')
ax1.set_title('3D: AI Evolution vs Job Impact', fontweight='bold')

# Economic impact over time (GDP growth correlation)
ax2 = fig.add_subplot(222, projection='3d')

gdp_impact = np.array([0, 0.1, 0.2, 0.3, 0.5, 0.8, 1.2, 1.8, 2.5, 3.2, 4.1, 5.2, 6.5, 8.1, 10.2, 12.8])
productivity_gain = np.array([0, 2, 5, 8, 12, 18, 25, 35, 48, 62, 78, 95, 115, 138, 165, 198])

ax2.scatter(years_3d, gdp_impact, productivity_gain, c=years_3d, cmap='plasma', s=100)

# Add trend line
ax2.plot(years_3d, gdp_impact, productivity_gain, 'r-', linewidth=2, alpha=0.7)

ax2.set_xlabel('Year')
ax2.set_ylabel('GDP Impact (Trillion $)')
ax2.set_zlabel('Productivity Gain %')
ax2.set_title('3D: Economic Impact of AI', fontweight='bold')

# Skills transformation matrix
ax3 = fig.add_subplot(223)

skills_data = np.array([
    [90, 80, 70, 60, 40, 30],  # Traditional Programming
    [60, 70, 80, 85, 90, 95],  # AI/ML Skills
    [50, 60, 70, 80, 90, 95],  # Data Analysis
    [40, 50, 60, 75, 85, 90],  # Automation
    [30, 40, 55, 70, 85, 95],  # Prompt Engineering
    [85, 80, 75, 70, 65, 60],  # Manual Testing
])

skills_labels = ['Traditional\nProgramming', 'AI/ML\nSkills', 'Data\nAnalysis',
                'Automation', 'Prompt\nEngineering', 'Manual\nTesting']
years_skills = ['2020', '2021', '2022', '2023', '2024', '2025']

im = ax3.imshow(skills_data, cmap='RdYlGn', aspect='auto')
ax3.set_xticks(range(len(years_skills)))
ax3.set_xticklabels(years_skills)
ax3.set_yticks(range(len(skills_labels)))
ax3.set_yticklabels(skills_labels)
ax3.set_title('Skills Demand Heat Map (Relevance %)', fontweight='bold')

# Add text annotations
for i in range(len(skills_labels)):
    for j in range(len(years_skills)):
        ax3.text(j, i, int(skills_data[i, j]), ha='center', va='center',
                color='white' if skills_data[i, j] < 50 else 'black', fontweight='bold')

# Colorbar
cbar = plt.colorbar(im, ax=ax3, shrink=0.8)
cbar.set_label('Demand Level (%)', rotation=270, labelpad=15)

# Future job categories pie chart
ax4 = fig.add_subplot(224)

job_categories = ['AI-Enhanced\nHuman Jobs', 'New AI-Related\nRoles', 'Traditional Jobs\n(AI-Resistant)',
                 'Displaced Jobs\n(To be retrained)', 'Fully Automated\nJobs']
sizes = [35, 25, 20, 15, 5]
colors = ['#2ecc71', '#3498db', '#f39c12', '#e67e22', '#e74c3c']
explode = (0.05, 0.05, 0, 0.1, 0.1)

wedges, texts, autotexts = ax4.pie(sizes, explode=explode, labels=job_categories, colors=colors,
                                  autopct='%1.1f%%', startangle=90, textprops={'fontsize': 10})

# Enhance the pie chart
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')

ax4.set_title('Future Job Landscape (2025-2030)', fontweight='bold', pad=20)

plt.tight_layout()
plt.show()

# Create predictive analysis visualization for AI agents adoption and career planning
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 14))
fig.suptitle('AI Agents & Future of Work: Predictive Analysis & Career Planning',
             fontsize=18, fontweight='bold', y=0.95)

# AI Agent adoption curve with S-curve modeling
years_future = np.arange(2024, 2031)
# Logistic growth model for AI agent adoption
def logistic_growth(t, k=100, r=0.8, t0=2025):
    return k / (1 + np.exp(-r * (t - t0)))

adoption_curve = logistic_growth(years_future)
enterprise_adoption = adoption_curve * 0.85  # Enterprise slightly behind consumer
consumer_adoption = adoption_curve

ax1.plot(years_future, consumer_adoption, 'b-', linewidth=3, marker='o',
         label='Consumer AI Agents', markersize=8)
ax1.plot(years_future, enterprise_adoption, 'r-', linewidth=3, marker='s',
         label='Enterprise AI Agents', markersize=8)

# Add confidence intervals
consumer_upper = consumer_adoption * 1.15
consumer_lower = consumer_adoption * 0.85
ax1.fill_between(years_future, consumer_lower, consumer_upper, alpha=0.2, color='blue')

ax1.set_xlabel('Year', fontweight='bold')
ax1.set_ylabel('Adoption Rate (%)', fontweight='bold')
ax1.set_title('AI Agents Adoption Forecast', fontweight='bold', pad=15)
ax1.legend()
ax1.grid(True, alpha=0.3)
ax1.set_ylim(0, 100)

# Annotate key inflection points
ax1.annotate('Mass Adoption\nTipping Point', xy=(2026, 50), xytext=(2027.5, 30),
            arrowprops=dict(arrowstyle='->', color='green', lw=2),
            bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgreen', alpha=0.7),
            fontsize=10, fontweight='bold')

# Job displacement vs creation timeline
displacement_jobs = np.array([0, -5, -12, -18, -22, -25, -26])  # Million jobs
created_jobs = np.array([0, 2, 8, 15, 28, 35, 42])  # Million jobs
net_impact = created_jobs + displacement_jobs

width = 0.6
x_pos = years_future

bars_disp = ax2.bar(x_pos, displacement_jobs, width, label='Jobs Displaced',
                   color='#e74c3c', alpha=0.8)
bars_created = ax2.bar(x_pos, created_jobs, width, label='Jobs Created',
                      color='#2ecc71', alpha=0.8)

# Net impact line
ax2.plot(x_pos, net_impact, 'ko-', linewidth=3, markersize=8, label='Net Impact')

ax2.set_xlabel('Year', fontweight='bold')
ax2.set_ylabel('Jobs (Millions)', fontweight='bold')
ax2.set_title('Job Market Transformation Timeline', fontweight='bold', pad=15)
ax2.legend()
ax2.grid(True, alpha=0.3)
ax2.axhline(y=0, color='black', linestyle='-', linewidth=1)

# Add value labels
for i, (disp, created, net) in enumerate(zip(displacement_jobs, created_jobs, net_impact)):
    if disp < 0:
        ax2.text(x_pos[i], disp - 1, f'{int(disp)}M', ha='center', va='top',
                fontweight='bold', color='darkred')
    if created > 0:
        ax2.text(x_pos[i], created + 1, f'+{int(created)}M', ha='center', va='bottom',
                fontweight='bold', color='darkgreen')

# Career transition matrix - from traditional to AI-enhanced roles
traditional_roles = ['Software Dev', 'Project Mgr', 'UX Designer', 'QA Tester', 'Bus Analyst']
ai_enhanced_roles = ['AI/ML Engineer', 'AI Product Mgr', 'AI UX Designer', 'AI QA Engineer', 'Data Scientist']

# Transition probability matrix (how likely each traditional role transitions to AI roles)
transition_matrix = np.array([
    [70, 20, 15, 25, 30],  # Software Dev
    [25, 80, 30, 20, 40],  # Project Mgr
    [20, 35, 85, 15, 25],  # UX Designer
    [30, 15, 20, 75, 35],  # QA Tester
    [40, 50, 25, 30, 70],  # Bus Analyst
])

im = ax3.imshow(transition_matrix, cmap='RdYlGn', aspect='auto')
ax3.set_xticks(range(len(ai_enhanced_roles)))
ax3.set_xticklabels(ai_enhanced_roles, rotation=45, ha='right')
ax3.set_yticks(range(len(traditional_roles)))
ax3.set_yticklabels(traditional_roles)
ax3.set_title('Career Transition Probability Matrix (%)', fontweight='bold', pad=15)

# Add percentage labels
for i in range(len(traditional_roles)):
    for j in range(len(ai_enhanced_roles)):
        ax3.text(j, i, f'{transition_matrix[i, j]}%', ha='center', va='center',
                color='white' if transition_matrix[i, j] < 50 else 'black',
                fontweight='bold', fontsize=9)

# Skills investment ROI chart
skills = ['Python/AI', 'Prompt Eng.', 'Data Analysis', 'Automation',
          'AI Ethics', 'ML Ops', 'Cloud AI', 'LLM Fine-tuning']
time_to_learn = [6, 2, 4, 3, 3, 8, 5, 10]  # months
salary_increase = [25, 35, 20, 18, 15, 30, 22, 40]  # percentage
market_demand = [90, 95, 80, 75, 60, 85, 70, 70]  # demand level

# Create bubble chart
colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', '#1abc9c', '#e67e22', '#34495e']

for i, (skill, time, salary, demand) in enumerate(zip(skills, time_to_learn, salary_increase, market_demand)):
    ax4.scatter(time, salary, s=demand*8, c=colors[i], alpha=0.7, edgecolors='black', linewidth=1)
    ax4.annotate(skill, (time, salary), xytext=(5, 5), textcoords='offset points',
                fontsize=9, ha='left')

ax4.set_xlabel('Time to Learn (Months)', fontweight='bold')
ax4.set_ylabel('Average Salary Increase (%)', fontweight='bold')
ax4.set_title('Skills Investment ROI Analysis\n(Bubble size = Market Demand)', fontweight='bold', pad=15)
ax4.grid(True, alpha=0.3)

# Add trend line
z = np.polyfit(time_to_learn, salary_increase, 1)
p = np.poly1d(z)
x_trend = np.linspace(min(time_to_learn), max(time_to_learn), 100)
ax4.plot(x_trend, p(x_trend), 'r--', alpha=0.8, linewidth=2, label='Trend')
ax4.legend()

plt.tight_layout()
plt.show()
# Create a comprehensive executive summary report
fig, ax = plt.subplots(figsize=(16, 20))
ax.axis('off')

# Title
fig.suptitle('THE AI REVOLUTION & FUTURE OF TECH CAREERS\nExecutive Summary Report',
             fontsize=24, fontweight='bold', y=0.98)

# Create text sections with professional formatting
report_sections = [
    {
        'title': '🎯 KEY FINDINGS',
        'content': '''
• AI adoption has accelerated dramatically since ChatGPT's launch in 2022
• 60% of jobs in advanced economies will be impacted by AI by 2025
• Tech roles face 25-70% automation risk, but new AI-enhanced positions are emerging
• Workers with AI skills command 56% higher wages (up from 25% in 2023)
• 400-800 million workers globally may need reskilling by 2030
• AI market projected to grow from $5.4B (2024) to $47.1B (2030)
        ''',
        'y_pos': 0.85
    },
    {
        'title': '📊 CURRENT LANDSCAPE (2024-2025)',
        'content': '''
HIGHEST RISK ROLES:
• QA Testers (70% automation risk)
• Technical Writers (65% risk)
• Business Analysts (50% risk)
• Project Managers (45% risk)

SAFER ROLES:
• UX/UI Designers (25% risk - creativity & empathy required)
• DevOps Engineers (30% risk - complex problem-solving)
• Software Engineers (35% risk - but evolving, not disappearing)

EMERGING OPPORTUNITIES:
• AI/ML Engineers (180% growth)
• Prompt Engineers (250% growth)
• AI Ethics Officers (150% growth)
• AI Product Managers (140% growth)
        ''',
        'y_pos': 0.65
    },
    {
        'title': '🔮 PREDICTIVE ANALYSIS (2025-2030)',
        'content': '''
AI AGENTS ADOPTION:
• Consumer adoption: 50% by 2026, 90% by 2030
• Enterprise adoption: 42% by 2026, 85% by 2030
• Mass adoption tipping point: 2026

JOB MARKET TRANSFORMATION:
• 26M jobs displaced by 2030
• 42M new jobs created by 2030
• Net gain: +16M jobs globally
• Peak disruption period: 2025-2027

SKILL EVOLUTION:
• Traditional programming skills declining in relative importance
• AI/ML skills demand increasing 350% by 2025
• Prompt engineering skills up 600% from 2022
• Automation skills growing 280% by 2025
        ''',
        'y_pos': 0.40
    },
    {
        'title': '🚀 STRATEGIC RECOMMENDATIONS',
        'content': '''
IMMEDIATE ACTIONS (Next 6 Months):
1. Learn prompt engineering (2-month investment, 35% salary boost)
2. Get familiar with AI coding assistants (GitHub Copilot, ChatGPT)
3. Start Python/AI fundamentals course (6-month program)

MEDIUM-TERM STRATEGY (6-18 Months):
1. Specialize in AI-enhanced version of current role
2. Build portfolio demonstrating AI integration skills
3. Network within AI/ML communities and conferences
4. Consider cloud AI certifications (AWS, Azure, GCP)

CAREER TRANSITION PLANNING:
• Software Devs → AI/ML Engineers (70% transition probability)
• UX Designers → AI UX Designers (85% probability)
• Project Managers → AI Product Managers (80% probability)
• QA Testers → AI QA Engineers (75% probability)

SKILL INVESTMENT PRIORITIES:
1. Python/AI (6 months, 25% salary increase)
2. Machine Learning Operations (8 months, 30% increase)
3. LLM Fine-tuning (10 months, 40% increase)
4. AI Ethics & Governance (3 months, 15% increase)
        ''',
        'y_pos': 0.15
    },
    {
        'title': '⚠️ CRITICAL SUCCESS FACTORS',
        'content': '''
THE ADAPTATION IMPERATIVE:
• Those who adapt quickly will thrive; those who don't risk displacement
• Continuous learning is no longer optional—it's survival
• AI will not replace humans, but humans using AI will replace those who don't

MINDSET SHIFT REQUIRED:
• From "AI will take my job" to "How can I use AI to become invaluable?"
• From task-focused to outcome-focused thinking
• From individual contributor to human-AI collaboration leader

TIMING IS CRITICAL:
• The window for upskilling is narrowing rapidly
• Early adopters are already seeing significant advantages
• By 2026, AI literacy will be table stakes for most tech roles
        ''',
        'y_pos': -0.05
    }
]

# Render each section
for section in report_sections:
    # Section title
    ax.text(0.05, section['y_pos'], section['title'],
            fontsize=18, fontweight='bold', color='#2c3e50',
            transform=ax.transAxes)

    # Section content
    ax.text(0.05, section['y_pos'] - 0.03, section['content'],
            fontsize=12, color='#34495e', linespacing=1.4,
            transform=ax.transAxes, verticalalignment='top')

# Add footer with data sources
footer_text = '''
Data Sources: McKinsey Global Institute, PwC AI Jobs Barometer 2025, World Economic Forum Future of Jobs Report,
OpenAI Research, International Monetary Fund, Bureau of Labor Statistics, Various Industry Reports (2022-2024)

Report Generated: December 2024 | For Tech Professionals Navigation Guide
'''

ax.text(0.5, -0.15, footer_text, fontsize=10, color='#7f8c8d',
        transform=ax.transAxes, ha='center', style='italic')

# Add decorative elements
ax.axhline(y=0.92, xmin=0.05, xmax=0.95, color='#3498db', linewidth=3)
ax.axhline(y=-0.08, xmin=0.05, xmax=0.95, color='#3498db', linewidth=3)

plt.tight_layout()
plt.show()
# Create a comprehensive executive summary report (fixed)
fig, ax = plt.subplots(figsize=(16, 20))
ax.axis('off')

# Title
fig.suptitle('THE AI REVOLUTION & FUTURE OF TECH CAREERS\nExecutive Summary Report',
             fontsize=24, fontweight='bold', y=0.98)

# Create text sections with professional formatting
report_sections = [
    {
        'title': 'KEY FINDINGS',
        'content': '''
• AI adoption has accelerated dramatically since ChatGPT's launch in 2022
• 60% of jobs in advanced economies will be impacted by AI by 2025
• Tech roles face 25-70% automation risk, but new AI-enhanced positions are emerging
• Workers with AI skills command 56% higher wages (up from 25% in 2023)
• 400-800 million workers globally may need reskilling by 2030
• AI market projected to grow from $5.4B (2024) to $47.1B (2030)
        ''',
        'y_pos': 0.85
    },
    {
        'title': 'CURRENT LANDSCAPE (2024-2025)',
        'content': '''
HIGHEST RISK ROLES:
• QA Testers (70% automation risk)
• Technical Writers (65% risk)
• Business Analysts (50% risk)
• Project Managers (45% risk)

SAFER ROLES:
• UX/UI Designers (25% risk - creativity & empathy required)
• DevOps Engineers (30% risk - complex problem-solving)
• Software Engineers (35% risk - but evolving, not disappearing)

EMERGING OPPORTUNITIES:
• AI/ML Engineers (180% growth)
• Prompt Engineers (250% growth)
• AI Ethics Officers (150% growth)
• AI Product Managers (140% growth)
        ''',
        'y_pos': 0.65
    },
    {
        'title': 'PREDICTIVE ANALYSIS (2025-2030)',
        'content': '''
AI AGENTS ADOPTION:
• Consumer adoption: 50% by 2026, 90% by 2030
• Enterprise adoption: 42% by 2026, 85% by 2030
• Mass adoption tipping point: 2026

JOB MARKET TRANSFORMATION:
• 26M jobs displaced by 2030
• 42M new jobs created by 2030
• Net gain: +16M jobs globally
• Peak disruption period: 2025-2027

SKILL EVOLUTION:
• Traditional programming skills declining in relative importance
• AI/ML skills demand increasing 350% by 2025
• Prompt engineering skills up 600% from 2022
• Automation skills growing 280% by 2025
        ''',
        'y_pos': 0.40
    },
    {
        'title': 'STRATEGIC RECOMMENDATIONS',
        'content': '''
IMMEDIATE ACTIONS (Next 6 Months):
1. Learn prompt engineering (2-month investment, 35% salary boost)
2. Get familiar with AI coding assistants (GitHub Copilot, ChatGPT)
3. Start Python/AI fundamentals course (6-month program)

MEDIUM-TERM STRATEGY (6-18 Months):
1. Specialize in AI-enhanced version of current role
2. Build portfolio demonstrating AI integration skills
3. Network within AI/ML communities and conferences
4. Consider cloud AI certifications (AWS, Azure, GCP)

CAREER TRANSITION PLANNING:
• Software Devs → AI/ML Engineers (70% transition probability)
• UX Designers → AI UX Designers (85% probability)
• Project Managers → AI Product Managers (80% probability)
• QA Testers → AI QA Engineers (75% probability)

SKILL INVESTMENT PRIORITIES:
1. Python/AI (6 months, 25% salary increase)
2. Machine Learning Operations (8 months, 30% increase)
3. LLM Fine-tuning (10 months, 40% increase)
4. AI Ethics & Governance (3 months, 15% increase)
        ''',
        'y_pos': 0.15
    },
    {
        'title': 'CRITICAL SUCCESS FACTORS',
        'content': '''
THE ADAPTATION IMPERATIVE:
• Those who adapt quickly will thrive; those who don't risk displacement
• Continuous learning is no longer optional—it's survival
• AI will not replace humans, but humans using AI will replace those who don't

MINDSET SHIFT REQUIRED:
• From "AI will take my job" to "How can I use AI to become invaluable?"
• From task-focused to outcome-focused thinking
• From individual contributor to human-AI collaboration leader

TIMING IS CRITICAL:
• The window for upskilling is narrowing rapidly
• Early adopters are already seeing significant advantages
• By 2026, AI literacy will be table stakes for most tech roles
        ''',
        'y_pos': -0.05
    }
]

# Render each section
for section in report_sections:
    # Section title with bullet point
    ax.text(0.05, section['y_pos'], f"• {section['title']}",
            fontsize=18, fontweight='bold', color='#2c3e50',
            transform=ax.transAxes)

    # Section content
    ax.text(0.05, section['y_pos'] - 0.03, section['content'],
            fontsize=12, color='#34495e', linespacing=1.4,
            transform=ax.transAxes, verticalalignment='top')

# Add footer with data sources
footer_text = '''
Data Sources: McKinsey Global Institute, PwC AI Jobs Barometer 2025, World Economic Forum Future of Jobs Report,
OpenAI Research, International Monetary Fund, Bureau of Labor Statistics, Various Industry Reports (2022-2024)

Report Generated: December 2024 | For Tech Professionals Navigation Guide
'''

ax.text(0.5, -0.15, footer_text, fontsize=10, color='#7f8c8d',
        transform=ax.transAxes, ha='center', style='italic')

# Add decorative lines using plot instead of axhline
ax.plot([0.05, 0.95], [0.92, 0.92], color='#3498db', linewidth=3, transform=ax.transAxes)
ax.plot([0.05, 0.95], [-0.08, -0.08], color='#3498db', linewidth=3, transform=ax.transAxes)

plt.tight_layout()
plt.show()
# Create a final comprehensive infographic-style summary
fig = plt.figure(figsize=(20, 24))

# Create a grid layout for the infographic
gs = fig.add_gridspec(6, 3, height_ratios=[1, 2, 2, 2, 2, 1], width_ratios=[1, 1, 1])

# Title section
ax_title = fig.add_subplot(gs[0, :])
ax_title.text(0.5, 0.5, 'AI & THE FUTURE OF TECH CAREERS\nNavigating the Revolution: A Data-Driven Analysis',
              fontsize=28, fontweight='bold', ha='center', va='center',
              bbox=dict(boxstyle='round,pad=0.5', facecolor='#34495e', edgecolor='none'),
              color='white')
ax_title.set_xlim(0, 1)
ax_title.set_ylim(0, 1)
ax_title.axis('off')

# Timeline section
ax_timeline = fig.add_subplot(gs[1, :])
years = np.array([1950, 1960, 1980, 2000, 2010, 2020, 2022, 2024, 2025])
ai_capability = np.array([5, 10, 20, 35, 50, 70, 80, 90, 95])
job_impact = np.array([0, 2, 8, 18, 25, 42, 47, 52, 60])

# Create dual y-axis timeline
ax_timeline2 = ax_timeline.twinx()

line1 = ax_timeline.plot(years, ai_capability, 'b-o', linewidth=4, markersize=8,
                        label='AI Capability Level', color='#3498db')
line2 = ax_timeline2.plot(years, job_impact, 'r-s', linewidth=4, markersize=8,
                         label='Jobs at Risk %', color='#e74c3c')

# Add key milestone annotations
milestones = {
    1950: 'Turing Test',
    1980: 'Expert Systems',
    2010: 'Deep Learning',
    2022: 'ChatGPT',
    2025: 'AI Agents Era'
}

for year, milestone in milestones.items():
    if year in years:
        idx = np.where(years == year)[0][0]
        ax_timeline.annotate(milestone, (year, ai_capability[idx]),
                           xytext=(0, 20), textcoords='offset points',
                           bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                           fontsize=10, ha='center', fontweight='bold')

ax_timeline.set_xlabel('Year', fontsize=14, fontweight='bold')
ax_timeline.set_ylabel('AI Capability Level', fontsize=14, fontweight='bold', color='#3498db')
ax_timeline2.set_ylabel('Jobs at Risk (%)', fontsize=14, fontweight='bold', color='#e74c3c')
ax_timeline.set_title('AI Evolution & Job Market Impact Timeline', fontsize=16, fontweight='bold', pad=20)
ax_timeline.grid(True, alpha=0.3)

# Current risk assessment
ax_risk = fig.add_subplot(gs[2, 0])
roles = ['QA\nTester', 'Tech\nWriter', 'Bus\nAnalyst', 'Project\nMgr', 'Software\nDev', 'DevOps\nEng', 'UX\nDesigner']
risks = [70, 65, 50, 45, 35, 30, 25]
colors_risk = ['#e74c3c', '#e74c3c', '#f39c12', '#f39c12', '#f39c12', '#2ecc71', '#2ecc71']

bars = ax_risk.barh(roles, risks, color=colors_risk, alpha=0.8)
ax_risk.set_xlabel('Automation Risk (%)', fontweight='bold')
ax_risk.set_title('Current Job Risk Assessment\n(2024-2025)', fontweight='bold', pad=15)
ax_risk.grid(axis='x', alpha=0.3)

for bar, risk in zip(bars, risks):
    ax_risk.text(bar.get_width() + 1, bar.get_y() + bar.get_height()/2,
                f'{risk}%', ha='left', va='center', fontweight='bold')

# New opportunities
ax_new = fig.add_subplot(gs[2, 1])
new_roles = ['Prompt\nEngineer', 'AI/ML\nEngineer', 'AI Ethics\nOfficer', 'AI Product\nManager', 'Data\nScientist']
growth = [250, 180, 150, 140, 120]
colors_new = ['#2ecc71'] * len(new_roles)

bars_new = ax_new.bar(new_roles, growth, color=colors_new, alpha=0.8)
ax_new.set_ylabel('Growth Rate (%)', fontweight='bold')
ax_new.set_title('Emerging AI Job Roles\n(2023-2025 Growth)', fontweight='bold', pad=15)
ax_new.tick_params(axis='x', rotation=45)
ax_new.grid(axis='y', alpha=0.3)

for bar, rate in zip(bars_new, growth):
    ax_new.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5,
               f'{rate}%', ha='center', va='bottom', fontweight='bold')

# Skills ROI analysis
ax_skills = fig.add_subplot(gs[2, 2])
skills = ['Prompt\nEng', 'Python\nAI', 'ML Ops', 'LLM\nTuning', 'Cloud\nAI']
time_months = [2, 6, 8, 10, 5]
salary_boost = [35, 25, 30, 40, 22]

scatter = ax_skills.scatter(time_months, salary_boost, s=[400, 300, 350, 500, 280],
                          c=['#e74c3c', '#3498db', '#2ecc71', '#f39c12', '#9b59b6'],
                          alpha=0.7, edgecolors='black', linewidth=2)

for i, skill in enumerate(skills):
    ax_skills.annotate(skill, (time_months[i], salary_boost[i]),
                      xytext=(5, 5), textcoords='offset points',
                      fontsize=10, fontweight='bold')

ax_skills.set_xlabel('Time to Learn (Months)', fontweight='bold')
ax_skills.set_ylabel('Salary Increase (%)', fontweight='bold')
ax_skills.set_title('Skills Investment ROI\n(Size = Market Demand)', fontweight='bold', pad=15)
ax_skills.grid(True, alpha=0.3)

# Future predictions
ax_future = fig.add_subplot(gs[3, :])
years_future = [2024, 2025, 2026, 2027, 2028, 2029, 2030]
jobs_displaced = [0, -5, -12, -18, -22, -25, -26]
jobs_created = [0, 2, 8, 15, 28, 35, 42]
net_impact = [c + d for c, d in zip(jobs_created, jobs_displaced)]

width = 0.6
x_pos = np.arange(len(years_future))

bars_disp = ax_future.bar(x_pos, jobs_displaced, width, label='Jobs Displaced (Millions)',
                         color='#e74c3c', alpha=0.8)
bars_created = ax_future.bar(x_pos, jobs_created, width, label='Jobs Created (Millions)',
                           color='#2ecc71', alpha=0.8)
line_net = ax_future.plot(x_pos, net_impact, 'ko-', linewidth=3, markersize=8,
                         label='Net Impact', color='#34495e')

ax_future.set_xlabel('Year', fontweight='bold')
ax_future.set_ylabel('Jobs (Millions)', fontweight='bold')
ax_future.set_title('Predicted Job Market Transformation (2024-2030)', fontweight='bold', pad=15)
ax_future.set_xticks(x_pos)
ax_future.set_xticklabels(years_future)
ax_future.legend()
ax_future.grid(True, alpha=0.3)
ax_future.axhline(y=0, color='black', linestyle='-', linewidth=1)

# Key statistics boxes
ax_stats = fig.add_subplot(gs[4, :])
ax_stats.axis('off')

stats_boxes = [
    {'title': 'AI Market Growth', 'value': '$5.4B → $47.1B', 'subtitle': '(2024-2030)', 'color': '#3498db'},
    {'title': 'Wage Premium', 'value': '56%', 'subtitle': 'for AI skills', 'color': '#2ecc71'},
    {'title': 'Global Reskilling', 'value': '400-800M', 'subtitle': 'workers by 2030', 'color': '#f39c12'},
    {'title': 'Job Impact', 'value': '60%', 'subtitle': 'of advanced economy jobs', 'color': '#e74c3c'},
    {'title': 'Agent Adoption', 'value': '85%', 'subtitle': 'enterprises by 2025', 'color': '#9b59b6'}
]

for i, stat in enumerate(stats_boxes):
    x_pos = 0.1 + i * 0.18
    rect = plt.Rectangle((x_pos - 0.08, 0.2), 0.16, 0.6,
                        facecolor=stat['color'], alpha=0.2, transform=ax_stats.transAxes)
    ax_stats.add_patch(rect)

    ax_stats.text(x_pos, 0.7, stat['title'], transform=ax_stats.transAxes,
                 fontsize=12, fontweight='bold', ha='center', color=stat['color'])
    ax_stats.text(x_pos, 0.5, stat['value'], transform=ax_stats.transAxes,
                 fontsize=18, fontweight='bold', ha='center', color='black')
    ax_stats.text(x_pos, 0.3, stat['subtitle'], transform=ax_stats.transAxes,
                 fontsize=10, ha='center', color='#7f8c8d')

# Action plan section
ax_action = fig.add_subplot(gs[5, :])
ax_action.axis('off')

action_text = '''
IMMEDIATE ACTION PLAN FOR TECH PROFESSIONALS:

🎯 NEXT 30 DAYS: Start learning prompt engineering, explore AI coding assistants (GitHub Copilot, ChatGPT)
📚 NEXT 3 MONTHS: Enroll in Python/AI fundamentals course, build first AI-enhanced project
🚀 NEXT 6 MONTHS: Complete AI certification, network with AI professionals, update LinkedIn with AI skills
💼 NEXT 12 MONTHS: Transition to AI-enhanced role, become team's AI champion, mentor others

Remember: AI won't replace you, but a person using AI might. The future belongs to those who adapt quickly.
'''

ax_action.text(0.5, 0.5, action_text, transform=ax_action.transAxes,
              fontsize=14, ha='center', va='center', linespacing=1.6,
              bbox=dict(boxstyle='round,pad=1', facecolor='#ecf0f1', edgecolor='#34495e', linewidth=2))

plt.tight_layout()
plt.show()