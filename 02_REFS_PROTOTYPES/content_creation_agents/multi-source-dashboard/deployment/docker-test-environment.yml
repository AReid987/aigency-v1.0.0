version: '3.8'

# Docker Compose configuration for complete testing environment
# Includes all services needed for integration testing

services:
  # PostgreSQL Database
  postgres-test:
    image: postgres:15
    environment:
      POSTGRES_DB: dashboard_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d dashboard_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for task queue and caching
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API
  backend-test:
    build:
      context: ../backend
      dockerfile: docker/Dockerfile.backend
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/dashboard_test
      - REDIS_URL=redis://redis-test:6379
      - ENVIRONMENT=testing
      - SECRET_KEY=test_secret_key_for_testing_only
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8001:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ../backend:/app
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker-test:
    build:
      context: ../backend
      dockerfile: docker/Dockerfile.celery
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/dashboard_test
      - REDIS_URL=redis://redis-test:6379
      - ENVIRONMENT=testing
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ../backend:/app
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "--loglevel=info"]

  # Celery Beat (scheduler)
  celery-beat-test:
    build:
      context: ../backend
      dockerfile: docker/Dockerfile.celery
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/dashboard_test
      - REDIS_URL=redis://redis-test:6379
      - ENVIRONMENT=testing
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ../backend:/app
      - celery_beat_data:/app/celerybeat-schedule
    command: ["celery", "-A", "app.tasks.celery_app", "beat", "--loglevel=info"]

  # Flower (task monitoring)
  flower-test:
    build:
      context: ../backend
      dockerfile: docker/Dockerfile.celery
    environment:
      - REDIS_URL=redis://redis-test:6379
    ports:
      - "5556:5555"
    depends_on:
      - redis-test
    command: ["celery", "-A", "app.tasks.celery_app", "flower", "--port=5555"]

  # Frontend (for E2E testing)
  frontend-test:
    build:
      context: ../frontend/multi-source-dashboard
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:8001
    ports:
      - "5174:3000"
    environment:
      - VITE_API_URL=http://backend-test:8000
    depends_on:
      - backend-test

  # Test Runner Container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    volumes:
      - .:/workspace/deployment
      - ../integration-tests:/workspace/integration-tests
      - test_results:/workspace/test-results
    environment:
      - BACKEND_URL=http://backend-test:8000
      - FRONTEND_URL=http://frontend-test:3000
      - POSTGRES_URL=postgresql://test_user:test_password@postgres-test:5432/dashboard_test
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      backend-test:
        condition: service_healthy
    command: ["python3", "/workspace/deployment/run_all_tests.py"]

volumes:
  postgres_test_data:
  redis_test_data:
  celery_beat_data:
  test_results: