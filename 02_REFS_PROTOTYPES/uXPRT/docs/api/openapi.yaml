openapi: 3.0.0
info:
  title: uXPRT API
  version: 1.0.0
  description: API endpoints for user authentication, search, and profiles in the uXPRT project.

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid input
        "409":
          description: User already exists

  /auth/login:
    post:
      summary: Authenticate a user and get a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Invalid credentials

  /auth/logout:
    post:
      summary: Log out the current user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User logged out successfully
        "401":
          description: Authentication required

  /api/search:
    post:
      summary: Perform a web search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        "200":
          description: Search successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "400":
          description: Invalid input
        "500":
          description: Internal server error

  /user/{user_id}:
    get:
      summary: Get a user profile by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          description: User not found
        "401":
          description: Authentication required
    put:
      summary: Update a user profile by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdate"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
        "404":
          description: User not found
        "401":
          description: Authentication required

  /user:
    post:
      summary: Create a new user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileCreate"
      responses:
        "201":
          description: User profile created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
        "409":
          description: User profile already exists for this user
        "401":
          description: Authentication required

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SearchRequest:
      type: object
      properties:
        query:
          type: string
          description: The search query.
        count:
          type: integer
          description: Number of results (1-20, default 10).
          default: 10
        offset:
          type: integer
          description: Pagination offset (max 9, default 0).
          default: 0
      required:
        - query
    SearchResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the search request.
        results:
          type: array
          description: List of search results.
          items:
            type: object # Define a more specific schema for individual search results if available
    UserProfile:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          readOnly: true
        username:
          type: string
        persona_type:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - user_id
        - email
    UserProfileCreate:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: The ID of the user for whom the profile is being created.
        username:
          type: string
        persona_type:
          type: string
      required:
        - user_id
    UserProfileUpdate:
      type: object
      properties:
        username:
          type: string
        persona_type:
          type: string
